#include <iostream>
#include "../bot/decision.h"
#include "../lib/color.hpp"

dye::R<char> char_to_color(char c)
{
    char fc = 'o';
    switch (c)
    {
    case 'R':
        return dye::red(fc);
    case 'Y':
        return dye::yellow(fc);
    case 'G':
        return dye::green(fc);
    case 'B':
        return dye::blue(fc);
    case '#':
        return dye::white(fc);
    default:
        return dye::grey(' ');
    }
    return dye::grey(' ');
};

void print_field_color(LTPuyo::Field field)
{
    using namespace LTPuyo;
    using namespace std;
    cout << " ------ \n";
    for (int y = 12; y >= 0; --y) {
        cout << "|";
        for (int x = 0; x < 6; ++x) {
            char c = convert_puyo_char(field.get_puyo(x, y));
            cout << char_to_color(c);
        }
        cout << "\n";
    }
    cout << " ------ \n";
    cout << endl;
};

void print_field_color(LTPuyo::Field field, LTPuyo::FieldMono mask)
{
    using namespace LTPuyo;
    using namespace std;
    cout << " ------ \n";
    for (int y = 12; y >= 0; --y) {
        cout << "|";
        for (int x = 0; x < 6; ++x) {
            if (((mask.column[x] >> y) & 1) > 0) {
                cout << dye::grey(' ');
                continue;
            }
            char c = convert_puyo_char(field.get_puyo(x, y));
            cout << char_to_color(c);
        }
        cout << "\n";
    }
    cout << " ------ \n";
    cout << endl;
};

int maina()
{
    using namespace LTPuyo;
    using namespace std;

    srand(uint32_t(time(NULL)));

    cin.get();

    int time_wait = 500;

    vector<pair<Puyo, Puyo>> queue;
    for (int i = 0; i < 1000; ++i) {
        queue.push_back({ Puyo(rand() % 4), Puyo(rand() % 4) });
    }

    Field field;
    print_field_color(field);
    this_thread::sleep_for(chrono::milliseconds(time_wait));

    int i = 0;
    while (true) 
    {
        vector<pair<Puyo, Puyo>> tqueue;
        tqueue.push_back(queue[(i + 0) % 1000]);
        tqueue.push_back(queue[(i + 1) % 1000]);
        tqueue.push_back(queue[(i + 2) % 1000]);

        ++i;

        SearchInfo sinfo;

        Search::search(field, tqueue, sinfo);

        cout << "node: " << sinfo.node << endl;

        SearchCandidate scan;

        Decision::decide(field, sinfo, scan);

        cout << endl;
        cout << "queue: ";
        cout << char_to_color(convert_puyo_char(tqueue[1].first));
        cout << char_to_color(convert_puyo_char(tqueue[1].second)) << " ";
        cout << char_to_color(convert_puyo_char(tqueue[2].first));
        cout << char_to_color(convert_puyo_char(tqueue[2].second)) << endl;

        Puyo pair[2] = { tqueue[0].first, tqueue[0].second };

        field.drop_pair(scan.placement.x, pair, scan.placement.rotation);

        print_field_color(field);
        this_thread::sleep_for(chrono::milliseconds(time_wait));
        // system("cls");

        FieldMono pop_mask = FieldMono();
        bool color[6];
        field.poppable_mask(pop_mask, color);
        int chain = 1;

        while (pop_mask.popcount() > 0)
        {
            cout << "chain:   " << chain << endl;
            cout << endl;
            cout << endl;
            print_field_color(field, pop_mask);
            this_thread::sleep_for(chrono::milliseconds(time_wait));
            // system("cls");

            for (uint8_t puyo = Puyo::RED; puyo < Puyo::COUNT; ++puyo) {
                for (int x = 0; x < 6; ++x) {
                    field.puyo[puyo].column[x] = pext16(field.puyo[puyo].column[x], ~pop_mask.column[x]);
                }
            }

            cout << "chain:   " << chain << endl;
            cout << endl;
            cout << endl;
            print_field_color(field);
            this_thread::sleep_for(chrono::milliseconds(time_wait));
            // system("cls");

            memset(pop_mask.column, 0, sizeof(pop_mask));
            field.poppable_mask(pop_mask, color);
            chain += 1;
        }
    }

    return 0;
};